globalcharinfo::globalcharinfo() {
    for (int i = 0; i < 65536; i++)
    {
        lookup[i] = 0;
    }

    // letters
    for (int i = 'a'; i <= 'z'; i++)
    {
        lookup[i] |= 1;
        lookup[i + 'A' - 'a'] |= 1;
    }
    for (int i = CHAR_CapitalAlpha; i <= CHAR_Epsilon; i++)
    {
        lookup[i] |= 1;
    }
    lookup['$'] |= 1;
    lookup[CHAR_Placeholder] |= 1;
    lookup[CHAR_ExponentialE] |= 1;
    lookup[CHAR_ImaginaryI] |= 1;
    lookup[CHAR_Infinity] |= 1;
    lookup[CHAR_LongDash] |= 1;

    // ops
    lookup['+'] |= 2;
    lookup['-'] |= 2;
    lookup['*'] |= 2;
    lookup['/'] |= 2;
    lookup['^'] |= 2;
    lookup[';'] |= 2;
    lookup[':'] |= 2;
    lookup['|'] |= 2;
    lookup['.'] |= 2;
    lookup['!'] |= 2;
    lookup['='] |= 2;
    lookup['<'] |= 2;
    lookup['>'] |= 2;
    lookup['@'] |= 2;
    lookup['&'] |= 2;
    lookup['~'] |= 2;
    lookup['\''] |= 2;
    lookup['?'] |= 2;
    lookup[CHAR_DifferentialD] |= 2;
    lookup[CHAR_Integral] |= 2;
    lookup[CHAR_Rule] |= 2;
    lookup[CHAR_RuleDelayed] |= 2;
    lookup[CHAR_Equal] |= 2;
    lookup[CHAR_NotEqual] |= 2;
    lookup[CHAR_LessEqual] |= 2;
    lookup[CHAR_GreaterEqual] |= 2;
    lookup[','] |= 2; // hmm

    // brackets
    lookup['{'] |= 4;
    lookup['}'] |= 4;
    lookup['['] |= 4;
    lookup[']'] |= 4;
    lookup['('] |= 4;
    lookup[')'] |= 4;
    lookup[CHAR_LeftDoubleBracket] |= 4;
    lookup[CHAR_RightDoubleBracket] |= 4;
    lookup[CHAR_LeftAssociation] |= 4;
    lookup[CHAR_RightAssociation] |= 4;
}



const char16_t namedchar_code[NAMED_CHARS_COUNT] = {
CHAR_Sum,
CHAR_Product,
CHAR_Integral,
CHAR_AAcute,
CHAR_ABar,
CHAR_ACup,
CHAR_ADoubleDot,
CHAR_AE,
CHAR_AGrave,
CHAR_AHat,
CHAR_Aleph,
CHAR_AliasDelimiter,
CHAR_AliasIndicator,
CHAR_Alpha,
CHAR_AltKey,
CHAR_And,
CHAR_Angle,
CHAR_Angstrom,
CHAR_ARing,
CHAR_AscendingEllipsis,
CHAR_ATilde,
CHAR_Backslash,
CHAR_BeamedEighthNote,
CHAR_BeamedSixteenthNote,
CHAR_Because,
CHAR_Bet,
CHAR_Beta,
CHAR_BlackBishop,
CHAR_BlackKing,
CHAR_BlackKnight,
CHAR_BlackPawn,
CHAR_BlackQueen,
CHAR_BlackRook,
CHAR_Breve,
CHAR_Bullet,
CHAR_CAcute,
CHAR_CapitalAAcute,
CHAR_CapitalABar,
CHAR_CapitalACup,
CHAR_CapitalADoubleDot,
CHAR_CapitalAE,
CHAR_CapitalAGrave,
CHAR_CapitalAHat,
CHAR_CapitalAlpha,
CHAR_CapitalARing,
CHAR_CapitalATilde,
CHAR_CapitalBeta,
CHAR_CapitalCAcute,
CHAR_CapitalCCedilla,
CHAR_CapitalCHacek,
CHAR_CapitalChi,
CHAR_CapitalDelta,
CHAR_CapitalDHacek,
CHAR_CapitalDifferentialD,
CHAR_CapitalDigamma,
CHAR_CapitalEAcute,
CHAR_CapitalEBar,
CHAR_CapitalECup,
CHAR_CapitalEDoubleDot,
CHAR_CapitalEGrave,
CHAR_CapitalEHacek,
CHAR_CapitalEHat,
CHAR_CapitalEpsilon,
CHAR_CapitalEta,
CHAR_CapitalEth,
CHAR_CapitalGamma,
CHAR_CapitalIAcute,
CHAR_CapitalICup,
CHAR_CapitalIDoubleDot,
CHAR_CapitalIGrave,
CHAR_CapitalIHat,
CHAR_CapitalIota,
CHAR_CapitalKappa,
CHAR_CapitalKoppa,
CHAR_CapitalLambda,
CHAR_CapitalLSlash,
CHAR_CapitalMu,
CHAR_CapitalNHacek,
CHAR_CapitalNTilde,
CHAR_CapitalNu,
CHAR_CapitalOAcute,
CHAR_CapitalODoubleAcute,
CHAR_CapitalODoubleDot,
CHAR_CapitalOE,
CHAR_CapitalOGrave,
CHAR_CapitalOHat,
CHAR_CapitalOmega,
CHAR_CapitalOmicron,
CHAR_CapitalOSlash,
CHAR_CapitalOTilde,
CHAR_CapitalPhi,
CHAR_CapitalPi,
CHAR_CapitalPsi,
CHAR_CapitalRHacek,
CHAR_CapitalRho,
CHAR_CapitalSampi,
CHAR_CapitalSHacek,
CHAR_CapitalSigma,
CHAR_CapitalStigma,
CHAR_CapitalTau,
CHAR_CapitalTHacek,
CHAR_CapitalTheta,
CHAR_CapitalThorn,
CHAR_CapitalUAcute,
CHAR_CapitalUDoubleAcute,
CHAR_CapitalUDoubleDot,
CHAR_CapitalUGrave,
CHAR_CapitalUHat,
CHAR_CapitalUpsilon,
CHAR_CapitalURing,
CHAR_CapitalXi,
CHAR_CapitalYAcute,
CHAR_CapitalZeta,
CHAR_CapitalZHacek,
CHAR_Cap,
CHAR_CCedilla,
CHAR_Cedilla,
CHAR_CenterDot,
CHAR_CenterEllipsis,
CHAR_Cent,
CHAR_CHacek,
CHAR_Checkmark,
CHAR_Chi,
CHAR_CircleDot,
CHAR_CircleMinus,
CHAR_CirclePlus,
CHAR_CircleTimes,
CHAR_ClockwiseContourIntegral,
CHAR_CloseCurlyDoubleQuote,
CHAR_CloseCurlyQuote,
CHAR_CloverLeaf,
CHAR_ClubSuit,
CHAR_Colon,
CHAR_CommandKey,
CHAR_Congruent,
CHAR_Conjugate,
CHAR_ConjugateTranspose,
CHAR_ConstantC,
CHAR_Continuation,
CHAR_ContourIntegral,
CHAR_ControlKey,
CHAR_Coproduct,
CHAR_Copyright,
CHAR_CounterClockwiseContourIntegral,
CHAR_Cross,
CHAR_CupCap,
CHAR_Cup,
CHAR_CurlyCapitalUpsilon,
CHAR_CurlyEpsilon,
CHAR_CurlyKappa,
CHAR_CurlyPhi,
CHAR_CurlyPi,
CHAR_CurlyRho,
CHAR_CurlyTheta,
CHAR_Currency,
CHAR_Dagger,
CHAR_Dalet,
CHAR_Dash,
CHAR_Degree,
CHAR_DeleteKey,
CHAR_Del,
CHAR_Delta,
CHAR_DescendingEllipsis,
CHAR_DHacek,
CHAR_Diameter,
CHAR_Diamond,
CHAR_DiamondSuit,
CHAR_DifferenceDelta,
CHAR_DifferentialD,
CHAR_Digamma,
CHAR_DiscreteRatio,
CHAR_DiscreteShift,
CHAR_Divide,
CHAR_DotEqual,
CHAR_DotlessI,
CHAR_DotlessJ,
CHAR_DottedSquare,
CHAR_DoubleContourIntegral,
CHAR_DoubleDagger,
CHAR_DoubledGamma,
CHAR_DoubleDownArrow,
CHAR_DoubledPi,
CHAR_DoubleLeftArrow,
CHAR_DoubleLeftRightArrow,
CHAR_DoubleLeftTee,
CHAR_DoubleLongLeftArrow,
CHAR_DoubleLongLeftRightArrow,
CHAR_DoubleLongRightArrow,
CHAR_DoublePrime,
CHAR_DoubleRightArrow,
CHAR_DoubleRightTee,
CHAR_DoubleStruckA,
CHAR_DoubleStruckB,
CHAR_DoubleStruckC,
CHAR_DoubleStruckCapitalA,
CHAR_DoubleStruckCapitalB,
CHAR_DoubleStruckCapitalC,
CHAR_DoubleStruckCapitalD,
CHAR_DoubleStruckCapitalE,
CHAR_DoubleStruckCapitalF,
CHAR_DoubleStruckCapitalG,
CHAR_DoubleStruckCapitalH,
CHAR_DoubleStruckCapitalI,
CHAR_DoubleStruckCapitalJ,
CHAR_DoubleStruckCapitalK,
CHAR_DoubleStruckCapitalL,
CHAR_DoubleStruckCapitalM,
CHAR_DoubleStruckCapitalN,
CHAR_DoubleStruckCapitalO,
CHAR_DoubleStruckCapitalP,
CHAR_DoubleStruckCapitalQ,
CHAR_DoubleStruckCapitalR,
CHAR_DoubleStruckCapitalS,
CHAR_DoubleStruckCapitalT,
CHAR_DoubleStruckCapitalU,
CHAR_DoubleStruckCapitalV,
CHAR_DoubleStruckCapitalW,
CHAR_DoubleStruckCapitalX,
CHAR_DoubleStruckCapitalY,
CHAR_DoubleStruckCapitalZ,
CHAR_DoubleStruckD,
CHAR_DoubleStruckE,
CHAR_DoubleStruckEight,
CHAR_DoubleStruckF,
CHAR_DoubleStruckFive,
CHAR_DoubleStruckFour,
CHAR_DoubleStruckG,
CHAR_DoubleStruckH,
CHAR_DoubleStruckI,
CHAR_DoubleStruckJ,
CHAR_DoubleStruckK,
CHAR_DoubleStruckL,
CHAR_DoubleStruckM,
CHAR_DoubleStruckN,
CHAR_DoubleStruckNine,
CHAR_DoubleStruckO,
CHAR_DoubleStruckOne,
CHAR_DoubleStruckP,
CHAR_DoubleStruckQ,
CHAR_DoubleStruckR,
CHAR_DoubleStruckS,
CHAR_DoubleStruckSeven,
CHAR_DoubleStruckSix,
CHAR_DoubleStruckT,
CHAR_DoubleStruckThree,
CHAR_DoubleStruckTwo,
CHAR_DoubleStruckU,
CHAR_DoubleStruckV,
CHAR_DoubleStruckW,
CHAR_DoubleStruckX,
CHAR_DoubleStruckY,
CHAR_DoubleStruckZ,
CHAR_DoubleStruckZero,
CHAR_DoubleUpArrow,
CHAR_DoubleUpDownArrow,
CHAR_DoubleVerticalBar,
CHAR_DownArrowBar,
CHAR_DownArrow,
CHAR_DownArrowUpArrow,
CHAR_DownBreve,
CHAR_DownExclamation,
CHAR_DownLeftRightVector,
CHAR_DownLeftTeeVector,
CHAR_DownLeftVector,
CHAR_DownLeftVectorBar,
CHAR_DownPointer,
CHAR_DownQuestion,
CHAR_DownRightTeeVector,
CHAR_DownRightVector,
CHAR_DownRightVectorBar,
CHAR_DownTeeArrow,
CHAR_DownTee,
CHAR_EAcute,
CHAR_Earth,
CHAR_EBar,
CHAR_ECup,
CHAR_EDoubleDot,
CHAR_EGrave,
CHAR_EHacek,
CHAR_EHat,
CHAR_EighthNote,
CHAR_Element,
CHAR_Ellipsis,
CHAR_EmptyCircle,
CHAR_EmptyDiamond,
CHAR_EmptyDownTriangle,
CHAR_EmptyRectangle,
CHAR_EmptySet,
CHAR_EmptySmallCircle,
CHAR_EmptySmallSquare,
CHAR_EmptySquare,
CHAR_EmptyUpTriangle,
CHAR_EmptyVerySmallSquare,
CHAR_EnterKey,
CHAR_EntityEnd,
CHAR_EntityStart,
CHAR_Epsilon,
CHAR_Equal,
CHAR_EqualTilde,
CHAR_Equilibrium,
CHAR_Equivalent,
CHAR_ErrorIndicator,
CHAR_EscapeKey,
CHAR_Eta,
CHAR_Eth,
CHAR_Euro,
CHAR_Exists,
CHAR_ExponentialE,
CHAR_FiLigature,
CHAR_FilledCircle,
CHAR_FilledDiamond,
CHAR_FilledDownTriangle,
CHAR_FilledLeftTriangle,
CHAR_FilledRectangle,
CHAR_FilledRightTriangle,
CHAR_FilledSmallCircle,
CHAR_FilledSmallSquare,
CHAR_FilledSquare,
CHAR_FilledUpTriangle,
CHAR_FilledVerySmallSquare,
CHAR_FinalSigma,
CHAR_FirstPage,
CHAR_FivePointedStar,
CHAR_Flat,
CHAR_FlLigature,
CHAR_Florin,
CHAR_ForAll,
CHAR_FreakedSmiley,
CHAR_Function,
CHAR_Gamma,
CHAR_Gimel,
CHAR_GothicA,
CHAR_GothicB,
CHAR_GothicC,
CHAR_GothicCapitalA,
CHAR_GothicCapitalB,
CHAR_GothicCapitalC,
CHAR_GothicCapitalD,
CHAR_GothicCapitalE,
CHAR_GothicCapitalF,
CHAR_GothicCapitalG,
CHAR_GothicCapitalH,
CHAR_GothicCapitalI,
CHAR_GothicCapitalJ,
CHAR_GothicCapitalK,
CHAR_GothicCapitalL,
CHAR_GothicCapitalM,
CHAR_GothicCapitalN,
CHAR_GothicCapitalO,
CHAR_GothicCapitalP,
CHAR_GothicCapitalQ,
CHAR_GothicCapitalR,
CHAR_GothicCapitalS,
CHAR_GothicCapitalT,
CHAR_GothicCapitalU,
CHAR_GothicCapitalV,
CHAR_GothicCapitalW,
CHAR_GothicCapitalX,
CHAR_GothicCapitalY,
CHAR_GothicCapitalZ,
CHAR_GothicD,
CHAR_GothicE,
CHAR_GothicEight,
CHAR_GothicF,
CHAR_GothicFive,
CHAR_GothicFour,
CHAR_GothicG,
CHAR_GothicH,
CHAR_GothicI,
CHAR_GothicJ,
CHAR_GothicK,
CHAR_GothicL,
CHAR_GothicM,
CHAR_GothicN,
CHAR_GothicNine,
CHAR_GothicO,
CHAR_GothicOne,
CHAR_GothicP,
CHAR_GothicQ,
CHAR_GothicR,
CHAR_GothicS,
CHAR_GothicSeven,
CHAR_GothicSix,
CHAR_GothicT,
CHAR_GothicThree,
CHAR_GothicTwo,
CHAR_GothicU,
CHAR_GothicV,
CHAR_GothicW,
CHAR_GothicX,
CHAR_GothicY,
CHAR_GothicZ,
CHAR_GothicZero,
CHAR_GreaterEqualLess,
CHAR_GreaterEqual,
CHAR_GreaterFullEqual,
CHAR_GreaterGreater,
CHAR_GreaterLess,
CHAR_GreaterSlantEqual,
CHAR_GreaterTilde,
CHAR_Hacek,
CHAR_HappySmiley,
CHAR_HBar,
CHAR_HeartSuit,
CHAR_HermitianConjugate,
CHAR_HumpDownHump,
CHAR_HumpEqual,
CHAR_Hyphen,
CHAR_IAcute,
CHAR_ICup,
CHAR_IDoubleDot,
CHAR_IGrave,
CHAR_IHat,
CHAR_ImaginaryI,
CHAR_ImaginaryJ,
CHAR_Implies,
CHAR_Infinity,
CHAR_Intersection,
CHAR_Iota,
CHAR_Jupiter,
CHAR_Kappa,
CHAR_KernelIcon,
CHAR_Koppa,
CHAR_Lambda,
CHAR_LastPage,
CHAR_LeftAngleBracket,
CHAR_LeftArrowBar,
CHAR_LeftArrow,
CHAR_LeftArrowRightArrow,
CHAR_LeftAssociation,
CHAR_LeftBracketingBar,
CHAR_LeftCeiling,
CHAR_LeftDoubleBracket,
CHAR_LeftDoubleBracketingBar,
CHAR_LeftDownTeeVector,
CHAR_LeftDownVectorBar,
CHAR_LeftDownVector,
CHAR_LeftFloor,
CHAR_LeftGuillemet,
CHAR_LeftModified,
CHAR_LeftPointer,
CHAR_LeftRightArrow,
CHAR_LeftRightVector,
CHAR_LeftSkeleton,
CHAR_LeftTee,
CHAR_LeftTeeArrow,
CHAR_LeftTeeVector,
CHAR_LeftTriangle,
CHAR_LeftTriangleBar,
CHAR_LeftTriangleEqual,
CHAR_LeftUpDownVector,
CHAR_LeftUpTeeVector,
CHAR_LeftUpVector,
CHAR_LeftUpVectorBar,
CHAR_LeftVector,
CHAR_LeftVectorBar,
CHAR_LessEqual,
CHAR_LessEqualGreater,
CHAR_LessFullEqual,
CHAR_LessGreater,
CHAR_LessLess,
CHAR_LessSlantEqual,
CHAR_LessTilde,
CHAR_LightBulb,
CHAR_LongDash,
CHAR_LongEqual,
CHAR_LongLeftArrow,
CHAR_LongLeftRightArrow,
CHAR_LongRightArrow,
CHAR_LowerLeftArrow,
CHAR_LowerRightArrow,
CHAR_LSlash,
CHAR_Mars,
CHAR_MathematicaIcon,
CHAR_MeasuredAngle,
CHAR_Mercury,
CHAR_Mho,
CHAR_Micro,
CHAR_MinusPlus,
CHAR_Mu,
CHAR_Nand,
CHAR_Natural,
CHAR_Neptune,
CHAR_NestedGreaterGreater,
CHAR_NestedLessLess,
CHAR_NeutralSmiley,
CHAR_NHacek,
CHAR_Nor,
CHAR_NotCongruent,
CHAR_NotCupCap,
CHAR_NotDoubleVerticalBar,
CHAR_NotElement,
CHAR_NotEqual,
CHAR_NotEqualTilde,
CHAR_NotExists,
CHAR_NotGreater,
CHAR_NotGreaterEqual,
CHAR_NotGreaterFullEqual,
CHAR_NotGreaterGreater,
CHAR_NotGreaterLess,
CHAR_NotGreaterSlantEqual,
CHAR_NotGreaterTilde,
CHAR_NotHumpDownHump,
CHAR_NotHumpEqual,
CHAR_NotLeftTriangle,
CHAR_NotLeftTriangleBar,
CHAR_NotLeftTriangleEqual,
CHAR_NotLessEqual,
CHAR_NotLessFullEqual,
CHAR_NotLessGreater,
CHAR_NotLess,
CHAR_NotLessLess,
CHAR_NotLessSlantEqual,
CHAR_NotLessTilde,
CHAR_Not,
CHAR_NotNestedGreaterGreater,
CHAR_NotNestedLessLess,
CHAR_NotPrecedes,
CHAR_NotPrecedesEqual,
CHAR_NotPrecedesSlantEqual,
CHAR_NotPrecedesTilde,
CHAR_NotReverseElement,
CHAR_NotRightTriangle,
CHAR_NotRightTriangleBar,
CHAR_NotRightTriangleEqual,
CHAR_NotSquareSubset,
CHAR_NotSquareSubsetEqual,
CHAR_NotSquareSuperset,
CHAR_NotSquareSupersetEqual,
CHAR_NotSubset,
CHAR_NotSubsetEqual,
CHAR_NotSucceeds,
CHAR_NotSucceedsEqual,
CHAR_NotSucceedsSlantEqual,
CHAR_NotSucceedsTilde,
CHAR_NotSuperset,
CHAR_NotSupersetEqual,
CHAR_NotTilde,
CHAR_NotTildeEqual,
CHAR_NotTildeFullEqual,
CHAR_NotTildeTilde,
CHAR_NotVerticalBar,
CHAR_NTilde,
CHAR_Nu,
CHAR_NumberSign,
CHAR_OAcute,
CHAR_ODoubleAcute,
CHAR_ODoubleDot,
CHAR_OE,
CHAR_OGrave,
CHAR_OHat,
CHAR_Omega,
CHAR_Omicron,
CHAR_OpenCurlyQuote,
CHAR_OptionKey,
CHAR_Or,
CHAR_OSlash,
CHAR_OTilde,
CHAR_OverBrace,
CHAR_OverBracket,
CHAR_OverParenthesis,
CHAR_Paragraph,
CHAR_PartialD,
CHAR_Phi,
CHAR_Pi,
CHAR_Piecewise,
CHAR_Placeholder,
CHAR_PlusMinus,
CHAR_Pluto,
CHAR_Precedes,
CHAR_PrecedesEqual,
CHAR_PrecedesSlantEqual,
CHAR_PrecedesTilde,
CHAR_Prime,
CHAR_Proportion,
CHAR_Proportional,
CHAR_Psi,
CHAR_QuarterNote,
CHAR_RegisteredTrademark,
CHAR_ReturnIndicator,
CHAR_ReturnKey,
CHAR_ReverseDoublePrime,
CHAR_ReverseElement,
CHAR_ReverseEquilibrium,
CHAR_ReversePrime,
CHAR_ReverseUpEquilibrium,
CHAR_RHacek,
CHAR_Rho,
CHAR_RightAngle,
CHAR_RightAngleBracket,
CHAR_RightArrow,
CHAR_RightArrowBar,
CHAR_RightArrowLeftArrow,
CHAR_RightAssociation,
CHAR_RightBracketingBar,
CHAR_RightCeiling,
CHAR_RightDoubleBracket,
CHAR_RightDoubleBracketingBar,
CHAR_RightDownTeeVector,
CHAR_RightDownVector,
CHAR_RightDownVectorBar,
CHAR_RightFloor,
CHAR_RightGuillemet,
CHAR_RightModified,
CHAR_RightPointer,
CHAR_RightSkeleton,
CHAR_RightTee,
CHAR_RightTeeArrow,
CHAR_RightTeeVector,
CHAR_RightTriangle,
CHAR_RightTriangleBar,
CHAR_RightTriangleEqual,
CHAR_RightUpDownVector,
CHAR_RightUpTeeVector,
CHAR_RightUpVector,
CHAR_RightUpVectorBar,
CHAR_RightVector,
CHAR_RightVectorBar,
CHAR_RoundImplies,
CHAR_RoundSpaceIndicator,
CHAR_Rule,
CHAR_RuleDelayed,
CHAR_SadSmiley,
CHAR_Sampi,
CHAR_Saturn,
CHAR_ScriptA,
CHAR_ScriptB,
CHAR_ScriptC,
CHAR_ScriptCapitalA,
CHAR_ScriptCapitalB,
CHAR_ScriptCapitalC,
CHAR_ScriptCapitalD,
CHAR_ScriptCapitalE,
CHAR_ScriptCapitalF,
CHAR_ScriptCapitalG,
CHAR_ScriptCapitalH,
CHAR_ScriptCapitalI,
CHAR_ScriptCapitalJ,
CHAR_ScriptCapitalK,
CHAR_ScriptCapitalL,
CHAR_ScriptCapitalM,
CHAR_ScriptCapitalN,
CHAR_ScriptCapitalO,
CHAR_ScriptCapitalP,
CHAR_ScriptCapitalQ,
CHAR_ScriptCapitalR,
CHAR_ScriptCapitalS,
CHAR_ScriptCapitalT,
CHAR_ScriptCapitalU,
CHAR_ScriptCapitalV,
CHAR_ScriptCapitalW,
CHAR_ScriptCapitalX,
CHAR_ScriptCapitalY,
CHAR_ScriptCapitalZ,
CHAR_ScriptD,
CHAR_ScriptDotlessI,
CHAR_ScriptDotlessJ,
CHAR_ScriptE,
CHAR_ScriptEight,
CHAR_ScriptF,
CHAR_ScriptFive,
CHAR_ScriptFour,
CHAR_ScriptG,
CHAR_ScriptH,
CHAR_ScriptI,
CHAR_ScriptJ,
CHAR_ScriptK,
CHAR_ScriptL,
CHAR_ScriptM,
CHAR_ScriptN,
CHAR_ScriptNine,
CHAR_ScriptO,
CHAR_ScriptOne,
CHAR_ScriptP,
CHAR_ScriptQ,
CHAR_ScriptR,
CHAR_ScriptS,
CHAR_ScriptSeven,
CHAR_ScriptSix,
CHAR_ScriptT,
CHAR_ScriptThree,
CHAR_ScriptTwo,
CHAR_ScriptU,
CHAR_ScriptV,
CHAR_ScriptW,
CHAR_ScriptX,
CHAR_ScriptY,
CHAR_ScriptZ,
CHAR_ScriptZero,
CHAR_Section,
CHAR_SelectionPlaceholder,
CHAR_SHacek,
CHAR_Sharp,
CHAR_ShortLeftArrow,
CHAR_ShortRightArrow,
CHAR_Sigma,
CHAR_SixPointedStar,
CHAR_SkeletonIndicator,
CHAR_SmallCircle,
CHAR_SpaceIndicator,
CHAR_SpaceKey,
CHAR_SpadeSuit,
CHAR_SpanFromAbove,
CHAR_SpanFromBoth,
CHAR_SpanFromLeft,
CHAR_SphericalAngle,
CHAR_Sqrt,
CHAR_Square,
CHAR_SquareIntersection,
CHAR_SquareSubset,
CHAR_SquareSubsetEqual,
CHAR_SquareSuperset,
CHAR_SquareSupersetEqual,
CHAR_SquareUnion,
CHAR_Star,
CHAR_Sterling,
CHAR_Stigma,
CHAR_Subset,
CHAR_SubsetEqual,
CHAR_Succeeds,
CHAR_SucceedsEqual,
CHAR_SucceedsSlantEqual,
CHAR_SucceedsTilde,
CHAR_SuchThat,
CHAR_Superset,
CHAR_SupersetEqual,
CHAR_SystemEnterKey,
CHAR_SZ,
CHAR_TabKey,
CHAR_Tau,
CHAR_THacek,
CHAR_Therefore,
CHAR_Theta,
CHAR_Thorn,
CHAR_Tilde,
CHAR_TildeEqual,
CHAR_TildeFullEqual,
CHAR_TildeTilde,
CHAR_Times,
CHAR_Trademark,
CHAR_Transpose,
CHAR_UAcute,
CHAR_UDoubleAcute,
CHAR_UDoubleDot,
CHAR_UGrave,
CHAR_UHat,
CHAR_UnderBrace,
CHAR_UnderBracket,
CHAR_UnderParenthesis,
CHAR_Union,
CHAR_UnionPlus,
CHAR_UpArrow,
CHAR_UpArrowBar,
CHAR_UpArrowDownArrow,
CHAR_UpDownArrow,
CHAR_UpEquilibrium,
CHAR_UpperLeftArrow,
CHAR_UpperRightArrow,
CHAR_UpPointer,
CHAR_Upsilon,
CHAR_UpTee,
CHAR_UpTeeArrow,
CHAR_Uranus,
CHAR_URing,
CHAR_Vee,
CHAR_Venus,
CHAR_VerticalBar,
CHAR_VerticalEllipsis,
CHAR_VerticalSeparator,
CHAR_VerticalTilde,
CHAR_WarningSign,
CHAR_WatchIcon,
CHAR_Wedge,
CHAR_WeierstrassP,
CHAR_WhiteBishop,
CHAR_WhiteKing,
CHAR_WhiteKnight,
CHAR_WhitePawn,
CHAR_WhiteQueen,
CHAR_WhiteRook,
CHAR_Wolf,
CHAR_WolframLanguageLogo,
CHAR_WolframLanguageLogoCircle,
CHAR_Xi,
CHAR_Xnor,
CHAR_Xor,
CHAR_YAcute,
CHAR_YDoubleDot,
CHAR_Yen,
CHAR_Zeta,
CHAR_ZHacek
};

const char * namedchar_cstr[NAMED_CHARS_COUNT] = {
"\\[Sum]",
"\\[Product]",
"\\[Integral]",
"\\[AAcute]",
"\\[ABar]",
"\\[ACup]",
"\\[ADoubleDot]",
"\\[AE]",
"\\[AGrave]",
"\\[AHat]",
"\\[Aleph]",
"\\[AliasDelimiter]",
"\\[AliasIndicator]",
"\\[Alpha]",
"\\[AltKey]",
"\\[And]",
"\\[Angle]",
"\\[Angstrom]",
"\\[ARing]",
"\\[AscendingEllipsis]",
"\\[ATilde]",
"\\[Backslash]",
"\\[BeamedEighthNote]",
"\\[BeamedSixteenthNote]",
"\\[Because]",
"\\[Bet]",
"\\[Beta]",
"\\[BlackBishop]",
"\\[BlackKing]",
"\\[BlackKnight]",
"\\[BlackPawn]",
"\\[BlackQueen]",
"\\[BlackRook]",
"\\[Breve]",
"\\[Bullet]",
"\\[CAcute]",
"\\[CapitalAAcute]",
"\\[CapitalABar]",
"\\[CapitalACup]",
"\\[CapitalADoubleDot]",
"\\[CapitalAE]",
"\\[CapitalAGrave]",
"\\[CapitalAHat]",
"\\[CapitalAlpha]",
"\\[CapitalARing]",
"\\[CapitalATilde]",
"\\[CapitalBeta]",
"\\[CapitalCAcute]",
"\\[CapitalCCedilla]",
"\\[CapitalCHacek]",
"\\[CapitalChi]",
"\\[CapitalDelta]",
"\\[CapitalDHacek]",
"\\[CapitalDifferentialD]",
"\\[CapitalDigamma]",
"\\[CapitalEAcute]",
"\\[CapitalEBar]",
"\\[CapitalECup]",
"\\[CapitalEDoubleDot]",
"\\[CapitalEGrave]",
"\\[CapitalEHacek]",
"\\[CapitalEHat]",
"\\[CapitalEpsilon]",
"\\[CapitalEta]",
"\\[CapitalEth]",
"\\[CapitalGamma]",
"\\[CapitalIAcute]",
"\\[CapitalICup]",
"\\[CapitalIDoubleDot]",
"\\[CapitalIGrave]",
"\\[CapitalIHat]",
"\\[CapitalIota]",
"\\[CapitalKappa]",
"\\[CapitalKoppa]",
"\\[CapitalLambda]",
"\\[CapitalLSlash]",
"\\[CapitalMu]",
"\\[CapitalNHacek]",
"\\[CapitalNTilde]",
"\\[CapitalNu]",
"\\[CapitalOAcute]",
"\\[CapitalODoubleAcute]",
"\\[CapitalODoubleDot]",
"\\[CapitalOE]",
"\\[CapitalOGrave]",
"\\[CapitalOHat]",
"\\[CapitalOmega]",
"\\[CapitalOmicron]",
"\\[CapitalOSlash]",
"\\[CapitalOTilde]",
"\\[CapitalPhi]",
"\\[CapitalPi]",
"\\[CapitalPsi]",
"\\[CapitalRHacek]",
"\\[CapitalRho]",
"\\[CapitalSampi]",
"\\[CapitalSHacek]",
"\\[CapitalSigma]",
"\\[CapitalStigma]",
"\\[CapitalTau]",
"\\[CapitalTHacek]",
"\\[CapitalTheta]",
"\\[CapitalThorn]",
"\\[CapitalUAcute]",
"\\[CapitalUDoubleAcute]",
"\\[CapitalUDoubleDot]",
"\\[CapitalUGrave]",
"\\[CapitalUHat]",
"\\[CapitalUpsilon]",
"\\[CapitalURing]",
"\\[CapitalXi]",
"\\[CapitalYAcute]",
"\\[CapitalZeta]",
"\\[CapitalZHacek]",
"\\[Cap]",
"\\[CCedilla]",
"\\[Cedilla]",
"\\[CenterDot]",
"\\[CenterEllipsis]",
"\\[Cent]",
"\\[CHacek]",
"\\[Checkmark]",
"\\[Chi]",
"\\[CircleDot]",
"\\[CircleMinus]",
"\\[CirclePlus]",
"\\[CircleTimes]",
"\\[ClockwiseContourIntegral]",
"\\[CloseCurlyDoubleQuote]",
"\\[CloseCurlyQuote]",
"\\[CloverLeaf]",
"\\[ClubSuit]",
"\\[Colon]",
"\\[CommandKey]",
"\\[Congruent]",
"\\[Conjugate]",
"\\[ConjugateTranspose]",
"\\[ConstantC]",
"\\[Continuation]",
"\\[ContourIntegral]",
"\\[ControlKey]",
"\\[Coproduct]",
"\\[Copyright]",
"\\[CounterClockwiseContourIntegral]",
"\\[Cross]",
"\\[CupCap]",
"\\[Cup]",
"\\[CurlyCapitalUpsilon]",
"\\[CurlyEpsilon]",
"\\[CurlyKappa]",
"\\[CurlyPhi]",
"\\[CurlyPi]",
"\\[CurlyRho]",
"\\[CurlyTheta]",
"\\[Currency]",
"\\[Dagger]",
"\\[Dalet]",
"\\[Dash]",
"\\[Degree]",
"\\[DeleteKey]",
"\\[Del]",
"\\[Delta]",
"\\[DescendingEllipsis]",
"\\[DHacek]",
"\\[Diameter]",
"\\[Diamond]",
"\\[DiamondSuit]",
"\\[DifferenceDelta]",
"\\[DifferentialD]",
"\\[Digamma]",
"\\[DiscreteRatio]",
"\\[DiscreteShift]",
"\\[Divide]",
"\\[DotEqual]",
"\\[DotlessI]",
"\\[DotlessJ]",
"\\[DottedSquare]",
"\\[DoubleContourIntegral]",
"\\[DoubleDagger]",
"\\[DoubledGamma]",
"\\[DoubleDownArrow]",
"\\[DoubledPi]",
"\\[DoubleLeftArrow]",
"\\[DoubleLeftRightArrow]",
"\\[DoubleLeftTee]",
"\\[DoubleLongLeftArrow]",
"\\[DoubleLongLeftRightArrow]",
"\\[DoubleLongRightArrow]",
"\\[DoublePrime]",
"\\[DoubleRightArrow]",
"\\[DoubleRightTee]",
"\\[DoubleStruckA]",
"\\[DoubleStruckB]",
"\\[DoubleStruckC]",
"\\[DoubleStruckCapitalA]",
"\\[DoubleStruckCapitalB]",
"\\[DoubleStruckCapitalC]",
"\\[DoubleStruckCapitalD]",
"\\[DoubleStruckCapitalE]",
"\\[DoubleStruckCapitalF]",
"\\[DoubleStruckCapitalG]",
"\\[DoubleStruckCapitalH]",
"\\[DoubleStruckCapitalI]",
"\\[DoubleStruckCapitalJ]",
"\\[DoubleStruckCapitalK]",
"\\[DoubleStruckCapitalL]",
"\\[DoubleStruckCapitalM]",
"\\[DoubleStruckCapitalN]",
"\\[DoubleStruckCapitalO]",
"\\[DoubleStruckCapitalP]",
"\\[DoubleStruckCapitalQ]",
"\\[DoubleStruckCapitalR]",
"\\[DoubleStruckCapitalS]",
"\\[DoubleStruckCapitalT]",
"\\[DoubleStruckCapitalU]",
"\\[DoubleStruckCapitalV]",
"\\[DoubleStruckCapitalW]",
"\\[DoubleStruckCapitalX]",
"\\[DoubleStruckCapitalY]",
"\\[DoubleStruckCapitalZ]",
"\\[DoubleStruckD]",
"\\[DoubleStruckE]",
"\\[DoubleStruckEight]",
"\\[DoubleStruckF]",
"\\[DoubleStruckFive]",
"\\[DoubleStruckFour]",
"\\[DoubleStruckG]",
"\\[DoubleStruckH]",
"\\[DoubleStruckI]",
"\\[DoubleStruckJ]",
"\\[DoubleStruckK]",
"\\[DoubleStruckL]",
"\\[DoubleStruckM]",
"\\[DoubleStruckN]",
"\\[DoubleStruckNine]",
"\\[DoubleStruckO]",
"\\[DoubleStruckOne]",
"\\[DoubleStruckP]",
"\\[DoubleStruckQ]",
"\\[DoubleStruckR]",
"\\[DoubleStruckS]",
"\\[DoubleStruckSeven]",
"\\[DoubleStruckSix]",
"\\[DoubleStruckT]",
"\\[DoubleStruckThree]",
"\\[DoubleStruckTwo]",
"\\[DoubleStruckU]",
"\\[DoubleStruckV]",
"\\[DoubleStruckW]",
"\\[DoubleStruckX]",
"\\[DoubleStruckY]",
"\\[DoubleStruckZ]",
"\\[DoubleStruckZero]",
"\\[DoubleUpArrow]",
"\\[DoubleUpDownArrow]",
"\\[DoubleVerticalBar]",
"\\[DownArrowBar]",
"\\[DownArrow]",
"\\[DownArrowUpArrow]",
"\\[DownBreve]",
"\\[DownExclamation]",
"\\[DownLeftRightVector]",
"\\[DownLeftTeeVector]",
"\\[DownLeftVector]",
"\\[DownLeftVectorBar]",
"\\[DownPointer]",
"\\[DownQuestion]",
"\\[DownRightTeeVector]",
"\\[DownRightVector]",
"\\[DownRightVectorBar]",
"\\[DownTeeArrow]",
"\\[DownTee]",
"\\[EAcute]",
"\\[Earth]",
"\\[EBar]",
"\\[ECup]",
"\\[EDoubleDot]",
"\\[EGrave]",
"\\[EHacek]",
"\\[EHat]",
"\\[EighthNote]",
"\\[Element]",
"\\[Ellipsis]",
"\\[EmptyCircle]",
"\\[EmptyDiamond]",
"\\[EmptyDownTriangle]",
"\\[EmptyRectangle]",
"\\[EmptySet]",
"\\[EmptySmallCircle]",
"\\[EmptySmallSquare]",
"\\[EmptySquare]",
"\\[EmptyUpTriangle]",
"\\[EmptyVerySmallSquare]",
"\\[EnterKey]",
"\\[EntityEnd]",
"\\[EntityStart]",
"\\[Epsilon]",
"\\[Equal]",
"\\[EqualTilde]",
"\\[Equilibrium]",
"\\[Equivalent]",
"\\[ErrorIndicator]",
"\\[EscapeKey]",
"\\[Eta]",
"\\[Eth]",
"\\[Euro]",
"\\[Exists]",
"\\[ExponentialE]",
"\\[FiLigature]",
"\\[FilledCircle]",
"\\[FilledDiamond]",
"\\[FilledDownTriangle]",
"\\[FilledLeftTriangle]",
"\\[FilledRectangle]",
"\\[FilledRightTriangle]",
"\\[FilledSmallCircle]",
"\\[FilledSmallSquare]",
"\\[FilledSquare]",
"\\[FilledUpTriangle]",
"\\[FilledVerySmallSquare]",
"\\[FinalSigma]",
"\\[FirstPage]",
"\\[FivePointedStar]",
"\\[Flat]",
"\\[FlLigature]",
"\\[Florin]",
"\\[ForAll]",
"\\[FreakedSmiley]",
"\\[Function]",
"\\[Gamma]",
"\\[Gimel]",
"\\[GothicA]",
"\\[GothicB]",
"\\[GothicC]",
"\\[GothicCapitalA]",
"\\[GothicCapitalB]",
"\\[GothicCapitalC]",
"\\[GothicCapitalD]",
"\\[GothicCapitalE]",
"\\[GothicCapitalF]",
"\\[GothicCapitalG]",
"\\[GothicCapitalH]",
"\\[GothicCapitalI]",
"\\[GothicCapitalJ]",
"\\[GothicCapitalK]",
"\\[GothicCapitalL]",
"\\[GothicCapitalM]",
"\\[GothicCapitalN]",
"\\[GothicCapitalO]",
"\\[GothicCapitalP]",
"\\[GothicCapitalQ]",
"\\[GothicCapitalR]",
"\\[GothicCapitalS]",
"\\[GothicCapitalT]",
"\\[GothicCapitalU]",
"\\[GothicCapitalV]",
"\\[GothicCapitalW]",
"\\[GothicCapitalX]",
"\\[GothicCapitalY]",
"\\[GothicCapitalZ]",
"\\[GothicD]",
"\\[GothicE]",
"\\[GothicEight]",
"\\[GothicF]",
"\\[GothicFive]",
"\\[GothicFour]",
"\\[GothicG]",
"\\[GothicH]",
"\\[GothicI]",
"\\[GothicJ]",
"\\[GothicK]",
"\\[GothicL]",
"\\[GothicM]",
"\\[GothicN]",
"\\[GothicNine]",
"\\[GothicO]",
"\\[GothicOne]",
"\\[GothicP]",
"\\[GothicQ]",
"\\[GothicR]",
"\\[GothicS]",
"\\[GothicSeven]",
"\\[GothicSix]",
"\\[GothicT]",
"\\[GothicThree]",
"\\[GothicTwo]",
"\\[GothicU]",
"\\[GothicV]",
"\\[GothicW]",
"\\[GothicX]",
"\\[GothicY]",
"\\[GothicZ]",
"\\[GothicZero]",
"\\[GreaterEqualLess]",
"\\[GreaterEqual]",
"\\[GreaterFullEqual]",
"\\[GreaterGreater]",
"\\[GreaterLess]",
"\\[GreaterSlantEqual]",
"\\[GreaterTilde]",
"\\[Hacek]",
"\\[HappySmiley]",
"\\[HBar]",
"\\[HeartSuit]",
"\\[HermitianConjugate]",
"\\[HumpDownHump]",
"\\[HumpEqual]",
"\\[Hyphen]",
"\\[IAcute]",
"\\[ICup]",
"\\[IDoubleDot]",
"\\[IGrave]",
"\\[IHat]",
"\\[ImaginaryI]",
"\\[ImaginaryJ]",
"\\[Implies]",
"\\[Infinity]",
"\\[Intersection]",
"\\[Iota]",
"\\[Jupiter]",
"\\[Kappa]",
"\\[KernelIcon]",
"\\[Koppa]",
"\\[Lambda]",
"\\[LastPage]",
"\\[LeftAngleBracket]",
"\\[LeftArrowBar]",
"\\[LeftArrow]",
"\\[LeftArrowRightArrow]",
"\\[LeftAssociation]",
"\\[LeftBracketingBar]",
"\\[LeftCeiling]",
"\\[LeftDoubleBracket]",
"\\[LeftDoubleBracketingBar]",
"\\[LeftDownTeeVector]",
"\\[LeftDownVectorBar]",
"\\[LeftDownVector]",
"\\[LeftFloor]",
"\\[LeftGuillemet]",
"\\[LeftModified]",
"\\[LeftPointer]",
"\\[LeftRightArrow]",
"\\[LeftRightVector]",
"\\[LeftSkeleton]",
"\\[LeftTee]",
"\\[LeftTeeArrow]",
"\\[LeftTeeVector]",
"\\[LeftTriangle]",
"\\[LeftTriangleBar]",
"\\[LeftTriangleEqual]",
"\\[LeftUpDownVector]",
"\\[LeftUpTeeVector]",
"\\[LeftUpVector]",
"\\[LeftUpVectorBar]",
"\\[LeftVector]",
"\\[LeftVectorBar]",
"\\[LessEqual]",
"\\[LessEqualGreater]",
"\\[LessFullEqual]",
"\\[LessGreater]",
"\\[LessLess]",
"\\[LessSlantEqual]",
"\\[LessTilde]",
"\\[LightBulb]",
"\\[LongDash]",
"\\[LongEqual]",
"\\[LongLeftArrow]",
"\\[LongLeftRightArrow]",
"\\[LongRightArrow]",
"\\[LowerLeftArrow]",
"\\[LowerRightArrow]",
"\\[LSlash]",
"\\[Mars]",
"\\[MathematicaIcon]",
"\\[MeasuredAngle]",
"\\[Mercury]",
"\\[Mho]",
"\\[Micro]",
"\\[MinusPlus]",
"\\[Mu]",
"\\[Nand]",
"\\[Natural]",
"\\[Neptune]",
"\\[NestedGreaterGreater]",
"\\[NestedLessLess]",
"\\[NeutralSmiley]",
"\\[NHacek]",
"\\[Nor]",
"\\[NotCongruent]",
"\\[NotCupCap]",
"\\[NotDoubleVerticalBar]",
"\\[NotElement]",
"\\[NotEqual]",
"\\[NotEqualTilde]",
"\\[NotExists]",
"\\[NotGreater]",
"\\[NotGreaterEqual]",
"\\[NotGreaterFullEqual]",
"\\[NotGreaterGreater]",
"\\[NotGreaterLess]",
"\\[NotGreaterSlantEqual]",
"\\[NotGreaterTilde]",
"\\[NotHumpDownHump]",
"\\[NotHumpEqual]",
"\\[NotLeftTriangle]",
"\\[NotLeftTriangleBar]",
"\\[NotLeftTriangleEqual]",
"\\[NotLessEqual]",
"\\[NotLessFullEqual]",
"\\[NotLessGreater]",
"\\[NotLess]",
"\\[NotLessLess]",
"\\[NotLessSlantEqual]",
"\\[NotLessTilde]",
"\\[Not]",
"\\[NotNestedGreaterGreater]",
"\\[NotNestedLessLess]",
"\\[NotPrecedes]",
"\\[NotPrecedesEqual]",
"\\[NotPrecedesSlantEqual]",
"\\[NotPrecedesTilde]",
"\\[NotReverseElement]",
"\\[NotRightTriangle]",
"\\[NotRightTriangleBar]",
"\\[NotRightTriangleEqual]",
"\\[NotSquareSubset]",
"\\[NotSquareSubsetEqual]",
"\\[NotSquareSuperset]",
"\\[NotSquareSupersetEqual]",
"\\[NotSubset]",
"\\[NotSubsetEqual]",
"\\[NotSucceeds]",
"\\[NotSucceedsEqual]",
"\\[NotSucceedsSlantEqual]",
"\\[NotSucceedsTilde]",
"\\[NotSuperset]",
"\\[NotSupersetEqual]",
"\\[NotTilde]",
"\\[NotTildeEqual]",
"\\[NotTildeFullEqual]",
"\\[NotTildeTilde]",
"\\[NotVerticalBar]",
"\\[NTilde]",
"\\[Nu]",
"\\[NumberSign]",
"\\[OAcute]",
"\\[ODoubleAcute]",
"\\[ODoubleDot]",
"\\[OE]",
"\\[OGrave]",
"\\[OHat]",
"\\[Omega]",
"\\[Omicron]",
"\\[OpenCurlyQuote]",
"\\[OptionKey]",
"\\[Or]",
"\\[OSlash]",
"\\[OTilde]",
"\\[OverBrace]",
"\\[OverBracket]",
"\\[OverParenthesis]",
"\\[Paragraph]",
"\\[PartialD]",
"\\[Phi]",
"\\[Pi]",
"\\[Piecewise]",
"\\[Placeholder]",
"\\[PlusMinus]",
"\\[Pluto]",
"\\[Precedes]",
"\\[PrecedesEqual]",
"\\[PrecedesSlantEqual]",
"\\[PrecedesTilde]",
"\\[Prime]",
"\\[Proportion]",
"\\[Proportional]",
"\\[Psi]",
"\\[QuarterNote]",
"\\[RegisteredTrademark]",
"\\[ReturnIndicator]",
"\\[ReturnKey]",
"\\[ReverseDoublePrime]",
"\\[ReverseElement]",
"\\[ReverseEquilibrium]",
"\\[ReversePrime]",
"\\[ReverseUpEquilibrium]",
"\\[RHacek]",
"\\[Rho]",
"\\[RightAngle]",
"\\[RightAngleBracket]",
"\\[RightArrow]",
"\\[RightArrowBar]",
"\\[RightArrowLeftArrow]",
"\\[RightAssociation]",
"\\[RightBracketingBar]",
"\\[RightCeiling]",
"\\[RightDoubleBracket]",
"\\[RightDoubleBracketingBar]",
"\\[RightDownTeeVector]",
"\\[RightDownVector]",
"\\[RightDownVectorBar]",
"\\[RightFloor]",
"\\[RightGuillemet]",
"\\[RightModified]",
"\\[RightPointer]",
"\\[RightSkeleton]",
"\\[RightTee]",
"\\[RightTeeArrow]",
"\\[RightTeeVector]",
"\\[RightTriangle]",
"\\[RightTriangleBar]",
"\\[RightTriangleEqual]",
"\\[RightUpDownVector]",
"\\[RightUpTeeVector]",
"\\[RightUpVector]",
"\\[RightUpVectorBar]",
"\\[RightVector]",
"\\[RightVectorBar]",
"\\[RoundImplies]",
"\\[RoundSpaceIndicator]",
"\\[Rule]",
"\\[RuleDelayed]",
"\\[SadSmiley]",
"\\[Sampi]",
"\\[Saturn]",
"\\[ScriptA]",
"\\[ScriptB]",
"\\[ScriptC]",
"\\[ScriptCapitalA]",
"\\[ScriptCapitalB]",
"\\[ScriptCapitalC]",
"\\[ScriptCapitalD]",
"\\[ScriptCapitalE]",
"\\[ScriptCapitalF]",
"\\[ScriptCapitalG]",
"\\[ScriptCapitalH]",
"\\[ScriptCapitalI]",
"\\[ScriptCapitalJ]",
"\\[ScriptCapitalK]",
"\\[ScriptCapitalL]",
"\\[ScriptCapitalM]",
"\\[ScriptCapitalN]",
"\\[ScriptCapitalO]",
"\\[ScriptCapitalP]",
"\\[ScriptCapitalQ]",
"\\[ScriptCapitalR]",
"\\[ScriptCapitalS]",
"\\[ScriptCapitalT]",
"\\[ScriptCapitalU]",
"\\[ScriptCapitalV]",
"\\[ScriptCapitalW]",
"\\[ScriptCapitalX]",
"\\[ScriptCapitalY]",
"\\[ScriptCapitalZ]",
"\\[ScriptD]",
"\\[ScriptDotlessI]",
"\\[ScriptDotlessJ]",
"\\[ScriptE]",
"\\[ScriptEight]",
"\\[ScriptF]",
"\\[ScriptFive]",
"\\[ScriptFour]",
"\\[ScriptG]",
"\\[ScriptH]",
"\\[ScriptI]",
"\\[ScriptJ]",
"\\[ScriptK]",
"\\[ScriptL]",
"\\[ScriptM]",
"\\[ScriptN]",
"\\[ScriptNine]",
"\\[ScriptO]",
"\\[ScriptOne]",
"\\[ScriptP]",
"\\[ScriptQ]",
"\\[ScriptR]",
"\\[ScriptS]",
"\\[ScriptSeven]",
"\\[ScriptSix]",
"\\[ScriptT]",
"\\[ScriptThree]",
"\\[ScriptTwo]",
"\\[ScriptU]",
"\\[ScriptV]",
"\\[ScriptW]",
"\\[ScriptX]",
"\\[ScriptY]",
"\\[ScriptZ]",
"\\[ScriptZero]",
"\\[Section]",
"\\[SelectionPlaceholder]",
"\\[SHacek]",
"\\[Sharp]",
"\\[ShortLeftArrow]",
"\\[ShortRightArrow]",
"\\[Sigma]",
"\\[SixPointedStar]",
"\\[SkeletonIndicator]",
"\\[SmallCircle]",
"\\[SpaceIndicator]",
"\\[SpaceKey]",
"\\[SpadeSuit]",
"\\[SpanFromAbove]",
"\\[SpanFromBoth]",
"\\[SpanFromLeft]",
"\\[SphericalAngle]",
"\\[Sqrt]",
"\\[Square]",
"\\[SquareIntersection]",
"\\[SquareSubset]",
"\\[SquareSubsetEqual]",
"\\[SquareSuperset]",
"\\[SquareSupersetEqual]",
"\\[SquareUnion]",
"\\[Star]",
"\\[Sterling]",
"\\[Stigma]",
"\\[Subset]",
"\\[SubsetEqual]",
"\\[Succeeds]",
"\\[SucceedsEqual]",
"\\[SucceedsSlantEqual]",
"\\[SucceedsTilde]",
"\\[SuchThat]",
"\\[Superset]",
"\\[SupersetEqual]",
"\\[SystemEnterKey]",
"\\[SZ]",
"\\[TabKey]",
"\\[Tau]",
"\\[THacek]",
"\\[Therefore]",
"\\[Theta]",
"\\[Thorn]",
"\\[Tilde]",
"\\[TildeEqual]",
"\\[TildeFullEqual]",
"\\[TildeTilde]",
"\\[Times]",
"\\[Trademark]",
"\\[Transpose]",
"\\[UAcute]",
"\\[UDoubleAcute]",
"\\[UDoubleDot]",
"\\[UGrave]",
"\\[UHat]",
"\\[UnderBrace]",
"\\[UnderBracket]",
"\\[UnderParenthesis]",
"\\[Union]",
"\\[UnionPlus]",
"\\[UpArrow]",
"\\[UpArrowBar]",
"\\[UpArrowDownArrow]",
"\\[UpDownArrow]",
"\\[UpEquilibrium]",
"\\[UpperLeftArrow]",
"\\[UpperRightArrow]",
"\\[UpPointer]",
"\\[Upsilon]",
"\\[UpTee]",
"\\[UpTeeArrow]",
"\\[Uranus]",
"\\[URing]",
"\\[Vee]",
"\\[Venus]",
"\\[VerticalBar]",
"\\[VerticalEllipsis]",
"\\[VerticalSeparator]",
"\\[VerticalTilde]",
"\\[WarningSign]",
"\\[WatchIcon]",
"\\[Wedge]",
"\\[WeierstrassP]",
"\\[WhiteBishop]",
"\\[WhiteKing]",
"\\[WhiteKnight]",
"\\[WhitePawn]",
"\\[WhiteQueen]",
"\\[WhiteRook]",
"\\[Wolf]",
"\\[WolframLanguageLogo]",
"\\[WolframLanguageLogoCircle]",
"\\[Xi]",
"\\[Xnor]",
"\\[Xor]",
"\\[YAcute]",
"\\[YDoubleDot]",
"\\[Yen]",
"\\[Zeta]",
"\\[ZHacek]"
};

struct {const char * s; int32_t c;} esccodes[] = {
{"a'"  ,CHAR_AAcute},
{"a-"  ,CHAR_ABar},
{"au"  ,CHAR_ACup},
{"a\""  ,CHAR_ADoubleDot},
{"ae"  ,CHAR_AE},
{"a`"  ,CHAR_AGrave},
{"a^"  ,CHAR_AHat},
{"al"  ,CHAR_Aleph},
{"esc"  ,CHAR_AliasIndicator},
{"a"  ,CHAR_Alpha},
{"alpha"  ,CHAR_Alpha},
{"alt"  ,CHAR_AltKey},
{"&&"  ,CHAR_And},
{"and"  ,CHAR_And},
{"Ang"  ,CHAR_Angstrom},
{"ao"  ,CHAR_ARing},
{"a~"  ,CHAR_ATilde},
{"\\"  ,CHAR_Backslash},
{"bet"  ,CHAR_Bet},
{"b"  ,CHAR_Beta},
{"beta"  ,CHAR_Beta},
{"bbishop"  ,CHAR_BlackBishop},
{"bking"  ,CHAR_BlackKing},
{"bknight"  ,CHAR_BlackKnight},
{"bpawn"  ,CHAR_BlackPawn},
{"bqueen"  ,CHAR_BlackQueen},
{"brook"  ,CHAR_BlackRook},
{"bv"  ,CHAR_Breve},
{"bu"  ,CHAR_Bullet},
{"c'"  ,CHAR_CAcute},
{"A'"  ,CHAR_CapitalAAcute},
{"A-"  ,CHAR_CapitalABar},
{"Au"  ,CHAR_CapitalACup},
{"A\""  ,CHAR_CapitalADoubleDot},
{"AE"  ,CHAR_CapitalAE},
{"A`"  ,CHAR_CapitalAGrave},
{"A^"  ,CHAR_CapitalAHat},
{"A"  ,CHAR_CapitalAlpha},
{"Alpha"  ,CHAR_CapitalAlpha},
{"Ao"  ,CHAR_CapitalARing},
{"A~"  ,CHAR_CapitalATilde},
{"B"  ,CHAR_CapitalBeta},
{"Beta"  ,CHAR_CapitalBeta},
{"C'"  ,CHAR_CapitalCAcute},
{"C,"  ,CHAR_CapitalCCedilla},
{"Cv"  ,CHAR_CapitalCHacek},
{"Ch"  ,CHAR_CapitalChi},
{"Chi"  ,CHAR_CapitalChi},
{"C"  ,CHAR_CapitalChi},
{"D"  ,CHAR_CapitalDelta},
{"Delta"  ,CHAR_CapitalDelta},
{"Dv"  ,CHAR_CapitalDHacek},
{"DD"  ,CHAR_CapitalDifferentialD},
{"Di"  ,CHAR_CapitalDigamma},
{"Digamma"  ,CHAR_CapitalDigamma},
{"E'"  ,CHAR_CapitalEAcute},
{"Ei"  ,CHAR_CapitalEBar},
{"Eu"  ,CHAR_CapitalECup},
{"E\""  ,CHAR_CapitalEDoubleDot},
{"E`"  ,CHAR_CapitalEGrave},
{"Ev"  ,CHAR_CapitalEHacek},
{"E^"  ,CHAR_CapitalEHat},
{"E"  ,CHAR_CapitalEpsilon},
{"Epsilon"  ,CHAR_CapitalEpsilon},
{"Et"  ,CHAR_CapitalEta},
{"Eta"  ,CHAR_CapitalEta},
{"H"  ,CHAR_CapitalEta},
{"D-"  ,CHAR_CapitalEth},
{"G"  ,CHAR_CapitalGamma},
{"Gamma"  ,CHAR_CapitalGamma},
{"I'"  ,CHAR_CapitalIAcute},
{"Iu"  ,CHAR_CapitalICup},
{"I\""  ,CHAR_CapitalIDoubleDot},
{"I`"  ,CHAR_CapitalIGrave},
{"I^"  ,CHAR_CapitalIHat},
{"I"  ,CHAR_CapitalIota},
{"Iota"  ,CHAR_CapitalIota},
{"K"  ,CHAR_CapitalKappa},
{"Kappa"  ,CHAR_CapitalKappa},
{"Ko"  ,CHAR_CapitalKoppa},
{"Koppa"  ,CHAR_CapitalKoppa},
{"L"  ,CHAR_CapitalLambda},
{"Lambda"  ,CHAR_CapitalLambda},
{"L/"  ,CHAR_CapitalLSlash},
{"M"  ,CHAR_CapitalMu},
{"Mu"  ,CHAR_CapitalMu},
{"Nv"  ,CHAR_CapitalNHacek},
{"N~"  ,CHAR_CapitalNTilde},
{"N"  ,CHAR_CapitalNu},
{"Nu"  ,CHAR_CapitalNu},
{"O'"  ,CHAR_CapitalOAcute},
{"O''"  ,CHAR_CapitalODoubleAcute},
{"O\""  ,CHAR_CapitalODoubleDot},
{"OE"  ,CHAR_CapitalOE},
{"O`"  ,CHAR_CapitalOGrave},
{"O^"  ,CHAR_CapitalOHat},
{"O"  ,CHAR_CapitalOmega},
{"Omega"  ,CHAR_CapitalOmega},
{"W"  ,CHAR_CapitalOmega},
{"Om"  ,CHAR_CapitalOmicron},
{"Omicron"  ,CHAR_CapitalOmicron},
{"O/"  ,CHAR_CapitalOSlash},
{"O~"  ,CHAR_CapitalOTilde},
{"Ph"  ,CHAR_CapitalPhi},
{"Phi"  ,CHAR_CapitalPhi},
{"F"  ,CHAR_CapitalPhi},
{"P"  ,CHAR_CapitalPi},
{"Pi"  ,CHAR_CapitalPi},
{"Ps"  ,CHAR_CapitalPsi},
{"Psi"  ,CHAR_CapitalPsi},
{"Y"  ,CHAR_CapitalPsi},
{"Rv"  ,CHAR_CapitalRHacek},
{"R"  ,CHAR_CapitalRho},
{"Rho"  ,CHAR_CapitalRho},
{"Sa"  ,CHAR_CapitalSampi},
{"Sampi"  ,CHAR_CapitalSampi},
{"Sv"  ,CHAR_CapitalSHacek},
{"S"  ,CHAR_CapitalSigma},
{"Sigma"  ,CHAR_CapitalSigma},
{"Sti"  ,CHAR_CapitalStigma},
{"Stigma"  ,CHAR_CapitalStigma},
{"T"  ,CHAR_CapitalTau},
{"Tau"  ,CHAR_CapitalTau},
{"Tv"  ,CHAR_CapitalTHacek},
{"Th"  ,CHAR_CapitalTheta},
{"Theta"  ,CHAR_CapitalTheta},
{"Thn"  ,CHAR_CapitalThorn},
{"U'"  ,CHAR_CapitalUAcute},
{"U''"  ,CHAR_CapitalUDoubleAcute},
{"U\""  ,CHAR_CapitalUDoubleDot},
{"U`"  ,CHAR_CapitalUGrave},
{"U^"  ,CHAR_CapitalUHat},
{"U"  ,CHAR_CapitalUpsilon},
{"Upsilon"  ,CHAR_CapitalUpsilon},
{"Uo"  ,CHAR_CapitalURing},
{"X"  ,CHAR_CapitalXi},
{"Xi"  ,CHAR_CapitalXi},
{"Y'"  ,CHAR_CapitalYAcute},
{"Z"  ,CHAR_CapitalZeta},
{"Zeta"  ,CHAR_CapitalZeta},
{"Zv"  ,CHAR_CapitalZHacek},
{"c,"  ,CHAR_CCedilla},
{"cd"  ,CHAR_Cedilla},
{"."  ,CHAR_CenterDot},
{"cent"  ,CHAR_Cent},
{"cv"  ,CHAR_CHacek},
{"ch"  ,CHAR_Chi},
{"chi"  ,CHAR_Chi},
{"c"  ,CHAR_Chi},
{"c."  ,CHAR_CircleDot},
{"c-"  ,CHAR_CircleMinus},
{"c+"  ,CHAR_CirclePlus},
{"c*"  ,CHAR_CircleTimes},
{"ccint"  ,CHAR_ClockwiseContourIntegral},
{"]\""  ,CHAR_CloseCurlyDoubleQuote},
{"]'"  ,CHAR_CloseCurlyQuote},
{"cl"  ,CHAR_CloverLeaf},
{":"  ,CHAR_Colon},
{"cmd"  ,CHAR_CommandKey},
{"==="  ,CHAR_Congruent},
{"co"  ,CHAR_Conjugate},
{"conj"  ,CHAR_Conjugate},
{"ct"  ,CHAR_ConjugateTranspose},
{"cc"  ,CHAR_ConstantC},
{"cont"  ,CHAR_Continuation},
{"cint"  ,CHAR_ContourIntegral},
{"ctrl"  ,CHAR_ControlKey},
{"coprod"  ,CHAR_Coproduct},
{"cccint"  ,CHAR_CounterClockwiseContourIntegral},
{"cross"  ,CHAR_Cross},
{"cU"  ,CHAR_CurlyCapitalUpsilon},
{"cUpsilon"  ,CHAR_CurlyCapitalUpsilon},
{"ce"  ,CHAR_CurlyEpsilon},
{"cepsilon"  ,CHAR_CurlyEpsilon},
{"ck"  ,CHAR_CurlyKappa},
{"ckappa"  ,CHAR_CurlyKappa},
{"j"  ,CHAR_CurlyPhi},
{"cph"  ,CHAR_CurlyPhi},
{"cphi"  ,CHAR_CurlyPhi},
{"cp"  ,CHAR_CurlyPi},
{"cpi"  ,CHAR_CurlyPi},
{"cr"  ,CHAR_CurlyRho},
{"crho"  ,CHAR_CurlyRho},
{"cq"  ,CHAR_CurlyTheta},
{"cth"  ,CHAR_CurlyTheta},
{"ctheta"  ,CHAR_CurlyTheta},
{"dg"  ,CHAR_Dagger},
{"da"  ,CHAR_Dalet},
{"-"  ,CHAR_Dash},
{"deg"  ,CHAR_Degree},
{" del"  ,CHAR_DeleteKey},
{"del"  ,CHAR_Del},
{"d"  ,CHAR_Delta},
{"delta"  ,CHAR_Delta},
{"Dv"  ,CHAR_DHacek},
{"dia"  ,CHAR_Diamond},
{"diffd"  ,CHAR_DifferenceDelta},
{"dd"  ,CHAR_DifferentialD},
{"di"  ,CHAR_Digamma},
{"digamma"  ,CHAR_Digamma},
{"dratio"  ,CHAR_DiscreteRatio},
{"shift"  ,CHAR_DiscreteShift},
{"div"  ,CHAR_Divide},
{".="  ,CHAR_DotEqual},
{"ddg"  ,CHAR_DoubleDagger},
{"gg"  ,CHAR_DoubledGamma},
{"pp"  ,CHAR_DoubledPi},
{" <="  ,CHAR_DoubleLeftArrow},
{"<=>"  ,CHAR_DoubleLeftRightArrow},
{"<=="  ,CHAR_DoubleLongLeftArrow},
{"<==>"  ,CHAR_DoubleLongLeftRightArrow},
{"==>"  ,CHAR_DoubleLongRightArrow},
{"''"  ,CHAR_DoublePrime},
{" =>"  ,CHAR_DoubleRightArrow},
{"dsa"  ,CHAR_DoubleStruckA},
{"dsb"  ,CHAR_DoubleStruckB},
{"dsc"  ,CHAR_DoubleStruckC},
{"dsA"  ,CHAR_DoubleStruckCapitalA},
{"dsB"  ,CHAR_DoubleStruckCapitalB},
{"dsC"  ,CHAR_DoubleStruckCapitalC},
{"dsD"  ,CHAR_DoubleStruckCapitalD},
{"dsE"  ,CHAR_DoubleStruckCapitalE},
{"dsF"  ,CHAR_DoubleStruckCapitalF},
{"dsG"  ,CHAR_DoubleStruckCapitalG},
{"dsH"  ,CHAR_DoubleStruckCapitalH},
{"dsI"  ,CHAR_DoubleStruckCapitalI},
{"dsJ"  ,CHAR_DoubleStruckCapitalJ},
{"dsK"  ,CHAR_DoubleStruckCapitalK},
{"dsL"  ,CHAR_DoubleStruckCapitalL},
{"dsM"  ,CHAR_DoubleStruckCapitalM},
{"dsN"  ,CHAR_DoubleStruckCapitalN},
{"dsO"  ,CHAR_DoubleStruckCapitalO},
{"dsP"  ,CHAR_DoubleStruckCapitalP},
{"dsQ"  ,CHAR_DoubleStruckCapitalQ},
{"dsR"  ,CHAR_DoubleStruckCapitalR},
{"dsS"  ,CHAR_DoubleStruckCapitalS},
{"dsT"  ,CHAR_DoubleStruckCapitalT},
{"dsU"  ,CHAR_DoubleStruckCapitalU},
{"dsV"  ,CHAR_DoubleStruckCapitalV},
{"dsW"  ,CHAR_DoubleStruckCapitalW},
{"dsX"  ,CHAR_DoubleStruckCapitalX},
{"dsY"  ,CHAR_DoubleStruckCapitalY},
{"dsZ"  ,CHAR_DoubleStruckCapitalZ},
{"dsd"  ,CHAR_DoubleStruckD},
{"dse"  ,CHAR_DoubleStruckE},
{"ds8"  ,CHAR_DoubleStruckEight},
{"dsf"  ,CHAR_DoubleStruckF},
{"ds5"  ,CHAR_DoubleStruckFive},
{"ds4"  ,CHAR_DoubleStruckFour},
{"dsg"  ,CHAR_DoubleStruckG},
{"dsh"  ,CHAR_DoubleStruckH},
{"dsi"  ,CHAR_DoubleStruckI},
{"dsj"  ,CHAR_DoubleStruckJ},
{"dsk"  ,CHAR_DoubleStruckK},
{"dsl"  ,CHAR_DoubleStruckL},
{"dsm"  ,CHAR_DoubleStruckM},
{"dsn"  ,CHAR_DoubleStruckN},
{"ds9"  ,CHAR_DoubleStruckNine},
{"dso"  ,CHAR_DoubleStruckO},
{"ds1"  ,CHAR_DoubleStruckOne},
{"dsp"  ,CHAR_DoubleStruckP},
{"dsq"  ,CHAR_DoubleStruckQ},
{"dsr"  ,CHAR_DoubleStruckR},
{"dss"  ,CHAR_DoubleStruckS},
{"ds7"  ,CHAR_DoubleStruckSeven},
{"ds6"  ,CHAR_DoubleStruckSix},
{"dst"  ,CHAR_DoubleStruckT},
{"ds3"  ,CHAR_DoubleStruckThree},
{"ds2"  ,CHAR_DoubleStruckTwo},
{"dsu"  ,CHAR_DoubleStruckU},
{"dsv"  ,CHAR_DoubleStruckV},
{"dsw"  ,CHAR_DoubleStruckW},
{"dsx"  ,CHAR_DoubleStruckX},
{"dsy"  ,CHAR_DoubleStruckY},
{"dsz"  ,CHAR_DoubleStruckZ},
{"ds0"  ,CHAR_DoubleStruckZero},
{" ||"  ,CHAR_DoubleVerticalBar},
{"dbv"  ,CHAR_DownBreve},
{"d!"  ,CHAR_DownExclamation},
{"d?"  ,CHAR_DownQuestion},
{"dT"  ,CHAR_DownTee},
{"e'"  ,CHAR_EAcute},
{"e-"  ,CHAR_EBar},
{"eu"  ,CHAR_ECup},
{"e\""  ,CHAR_EDoubleDot},
{"e`"  ,CHAR_EGrave},
{"ev"  ,CHAR_EHacek},
{"e^"  ,CHAR_EHat},
{"elem"  ,CHAR_Element},
{"..."  ,CHAR_Ellipsis},
{"eci"  ,CHAR_EmptyCircle},
{"es"  ,CHAR_EmptySet},
{"esci"  ,CHAR_EmptySmallCircle},
{"essq"  ,CHAR_EmptySmallSquare},
{"esq"  ,CHAR_EmptySquare},
{"evssq"  ,CHAR_EmptyVerySmallSquare},
{"ent"  ,CHAR_EnterKey},
{"e"  ,CHAR_Epsilon},
{"epsilon"  ,CHAR_Epsilon},
{"=="  ,CHAR_Equal},
{"=~"  ,CHAR_EqualTilde},
{"equi"  ,CHAR_Equilibrium},
{"equiv"  ,CHAR_Equivalent},
{" esc"  ,CHAR_EscapeKey},
{"et"  ,CHAR_Eta},
{"eta"  ,CHAR_Eta},
{"h"  ,CHAR_Eta},
{"d-"  ,CHAR_Eth},
{"ex"  ,CHAR_Exists},
{"ee"  ,CHAR_ExponentialE},
{"fci"  ,CHAR_FilledCircle},
{"fsci"  ,CHAR_FilledSmallCircle},
{"fssq"  ,CHAR_FilledSmallSquare},
{"fsq"  ,CHAR_FilledSquare},
{"fvssq"  ,CHAR_FilledVerySmallSquare},
{"fs"  ,CHAR_FinalSigma},
{"*5"  ,CHAR_FivePointedStar},
{"fa"  ,CHAR_ForAll},
{":-@"  ,CHAR_FreakedSmiley},
{"fn"  ,CHAR_Function},
{"g"  ,CHAR_Gamma},
{"gamma"  ,CHAR_Gamma},
{"gi"  ,CHAR_Gimel},
{"goa"  ,CHAR_GothicA},
{"gob"  ,CHAR_GothicB},
{"goc"  ,CHAR_GothicC},
{"goA"  ,CHAR_GothicCapitalA},
{"goB"  ,CHAR_GothicCapitalB},
{"goC"  ,CHAR_GothicCapitalC},
{"goD"  ,CHAR_GothicCapitalD},
{"goE"  ,CHAR_GothicCapitalE},
{"goF"  ,CHAR_GothicCapitalF},
{"goG"  ,CHAR_GothicCapitalG},
{"goH"  ,CHAR_GothicCapitalH},
{"goI"  ,CHAR_GothicCapitalI},
{"goJ"  ,CHAR_GothicCapitalJ},
{"goK"  ,CHAR_GothicCapitalK},
{"goL"  ,CHAR_GothicCapitalL},
{"goM"  ,CHAR_GothicCapitalM},
{"goN"  ,CHAR_GothicCapitalN},
{"goO"  ,CHAR_GothicCapitalO},
{"goP"  ,CHAR_GothicCapitalP},
{"goQ"  ,CHAR_GothicCapitalQ},
{"goR"  ,CHAR_GothicCapitalR},
{"goS"  ,CHAR_GothicCapitalS},
{"goT"  ,CHAR_GothicCapitalT},
{"goU"  ,CHAR_GothicCapitalU},
{"goV"  ,CHAR_GothicCapitalV},
{"goW"  ,CHAR_GothicCapitalW},
{"goX"  ,CHAR_GothicCapitalX},
{"goY"  ,CHAR_GothicCapitalY},
{"goZ"  ,CHAR_GothicCapitalZ},
{"god"  ,CHAR_GothicD},
{"goe"  ,CHAR_GothicE},
{"go8"  ,CHAR_GothicEight},
{"gof"  ,CHAR_GothicF},
{"go5"  ,CHAR_GothicFive},
{"go4"  ,CHAR_GothicFour},
{"gog"  ,CHAR_GothicG},
{"goh"  ,CHAR_GothicH},
{"goi"  ,CHAR_GothicI},
{"goj"  ,CHAR_GothicJ},
{"gok"  ,CHAR_GothicK},
{"gol"  ,CHAR_GothicL},
{"gom"  ,CHAR_GothicM},
{"gon"  ,CHAR_GothicN},
{"go9"  ,CHAR_GothicNine},
{"goo"  ,CHAR_GothicO},
{"go1"  ,CHAR_GothicOne},
{"gop"  ,CHAR_GothicP},
{"goq"  ,CHAR_GothicQ},
{"gor"  ,CHAR_GothicR},
{"gos"  ,CHAR_GothicS},
{"go7"  ,CHAR_GothicSeven},
{"go6"  ,CHAR_GothicSix},
{"got"  ,CHAR_GothicT},
{"go3"  ,CHAR_GothicThree},
{"go2"  ,CHAR_GothicTwo},
{"gou"  ,CHAR_GothicU},
{"gov"  ,CHAR_GothicV},
{"gow"  ,CHAR_GothicW},
{"gox"  ,CHAR_GothicX},
{"goy"  ,CHAR_GothicY},
{"goz"  ,CHAR_GothicZ},
{"go0"  ,CHAR_GothicZero},
{">="  ,CHAR_GreaterEqual},
{">/"  ,CHAR_GreaterSlantEqual},
{">~"  ,CHAR_GreaterTilde},
{"hc"  ,CHAR_Hacek},
{":)"  ,CHAR_HappySmiley},
{":-)"  ,CHAR_HappySmiley},
{"hb"  ,CHAR_HBar},
{"hc"  ,CHAR_HermitianConjugate},
{"hy"  ,CHAR_Hyphen},
{"i'"  ,CHAR_IAcute},
{"iu"  ,CHAR_ICup},
{"i\""  ,CHAR_IDoubleDot},
{"i`"  ,CHAR_IGrave},
{"i^"  ,CHAR_IHat},
{"ii"  ,CHAR_ImaginaryI},
{"jj"  ,CHAR_ImaginaryJ},
{"=>"  ,CHAR_Implies},
{"inf"  ,CHAR_Infinity},
{"int"  ,CHAR_Integral},
{"inter"  ,CHAR_Intersection},
{"i"  ,CHAR_Iota},
{"iota"  ,CHAR_Iota},
{"k"  ,CHAR_Kappa},
{"kappa"  ,CHAR_Kappa},
{"ko"  ,CHAR_Koppa},
{"koppa"  ,CHAR_Koppa},
{"l"  ,CHAR_Lambda},
{"lambda"  ,CHAR_Lambda},
{"<"  ,CHAR_LeftAngleBracket},
{"<-"  ,CHAR_LeftArrow},
{"<|"  ,CHAR_LeftAssociation},
{"l|"  ,CHAR_LeftBracketingBar},
{"lc"  ,CHAR_LeftCeiling},
{"[["  ,CHAR_LeftDoubleBracket},
{"l||"  ,CHAR_LeftDoubleBracketingBar},
{"lf"  ,CHAR_LeftFloor},
{"g<<"  ,CHAR_LeftGuillemet},
{"["  ,CHAR_LeftModified},
{"<->"  ,CHAR_LeftRightArrow},
{"lT"  ,CHAR_LeftTee},
{"<="  ,CHAR_LessEqual},
{"</"  ,CHAR_LessSlantEqual},
{"<~"  ,CHAR_LessTilde},
{"--"  ,CHAR_LongDash},
{"<--"  ,CHAR_LongLeftArrow},
{"<-->"  ,CHAR_LongLeftRightArrow},
{"-->"  ,CHAR_LongRightArrow},
{"l/"  ,CHAR_LSlash},
{"math"  ,CHAR_MathematicaIcon},
{"mho"  ,CHAR_Mho},
{"mi"  ,CHAR_Micro},
{"-+"  ,CHAR_MinusPlus},
{"m"  ,CHAR_Mu},
{"mu"  ,CHAR_Mu},
{"nand"  ,CHAR_Nand},
{":-|"  ,CHAR_NeutralSmiley},
{"nv"  ,CHAR_NHacek},
{"nor"  ,CHAR_Nor},
{"!==="  ,CHAR_NotCongruent},
{"!||"  ,CHAR_NotDoubleVerticalBar},
{"!elem"  ,CHAR_NotElement},
{"!="  ,CHAR_NotEqual},
{"!=~"  ,CHAR_NotEqualTilde},
{"!ex"  ,CHAR_NotExists},
{"!>"  ,CHAR_NotGreater},
{"!>="  ,CHAR_NotGreaterEqual},
{"!>/"  ,CHAR_NotGreaterSlantEqual},
{"!>~"  ,CHAR_NotGreaterTilde},
{"!huh"  ,CHAR_NotHumpDownHump},
{"!h="  ,CHAR_NotHumpEqual},
{"!<="  ,CHAR_NotLessEqual},
{"!<"  ,CHAR_NotLess},
{"!</"  ,CHAR_NotLessSlantEqual},
{"!<~"  ,CHAR_NotLessTilde},
{"!"  ,CHAR_Not},
{"not"  ,CHAR_Not},
{"!mem"  ,CHAR_NotReverseElement},
{"!sub"  ,CHAR_NotSubset},
{"!sub="  ,CHAR_NotSubsetEqual},
{"!sup"  ,CHAR_NotSuperset},
{"!sup="  ,CHAR_NotSupersetEqual},
{"!~"  ,CHAR_NotTilde},
{"!~="  ,CHAR_NotTildeEqual},
{"!~=="  ,CHAR_NotTildeFullEqual},
{"!~~"  ,CHAR_NotTildeTilde},
{"!|"  ,CHAR_NotVerticalBar},
{"n~"  ,CHAR_NTilde},
{"n"  ,CHAR_Nu},
{"nu"  ,CHAR_Nu},
{"#"  ,CHAR_NumberSign},
{"o'"  ,CHAR_OAcute},
{"o''"  ,CHAR_ODoubleAcute},
{"o\""  ,CHAR_ODoubleDot},
{"oe"  ,CHAR_OE},
{"o`"  ,CHAR_OGrave},
{"o^"  ,CHAR_OHat},
{"o"  ,CHAR_Omega},
{"omega"  ,CHAR_Omega},
{"w"  ,CHAR_Omega},
{"om"  ,CHAR_Omicron},
{"omicron"  ,CHAR_Omicron},
{"['"  ,CHAR_OpenCurlyQuote},
{"opt"  ,CHAR_OptionKey},
{"||"  ,CHAR_Or},
{"or"  ,CHAR_Or},
{"o/"  ,CHAR_OSlash},
{"o~"  ,CHAR_OTilde},
{"o{"  ,CHAR_OverBrace},
{"o["  ,CHAR_OverBracket},
{"o("  ,CHAR_OverParenthesis},
{"pd"  ,CHAR_PartialD},
{"ph"  ,CHAR_Phi},
{"phi"  ,CHAR_Phi},
{"f"  ,CHAR_Phi},
{"p"  ,CHAR_Pi},
{"pi"  ,CHAR_Pi},
{"pw"  ,CHAR_Piecewise},
{"pl"  ,CHAR_Placeholder},
{"+-"  ,CHAR_PlusMinus},
{"'"  ,CHAR_Prime},
{"prod"  ,CHAR_Product},
{"prop"  ,CHAR_Proportional},
{"ps"  ,CHAR_Psi},
{"psi"  ,CHAR_Psi},
{"y"  ,CHAR_Psi},
{"ret"  ,CHAR_ReturnIndicator},
{" ret"  ,CHAR_ReturnKey},
{"``"  ,CHAR_ReverseDoublePrime},
{"mem"  ,CHAR_ReverseElement},
{"`"  ,CHAR_ReversePrime},
{"Rv"  ,CHAR_RHacek},
{"r"  ,CHAR_Rho},
{"rho"  ,CHAR_Rho},
{">"  ,CHAR_RightAngleBracket},
{" ->"  ,CHAR_RightArrow},
{"|>"  ,CHAR_RightAssociation},
{"r|"  ,CHAR_RightBracketingBar},
{"rc"  ,CHAR_RightCeiling},
{"]]"  ,CHAR_RightDoubleBracket},
{"r||"  ,CHAR_RightDoubleBracketingBar},
{"rf"  ,CHAR_RightFloor},
{"g>>"  ,CHAR_RightGuillemet},
{"]"  ,CHAR_RightModified},
{"rT"  ,CHAR_RightTee},
{"vec"  ,CHAR_RightVector},
{"->"  ,CHAR_Rule},
{":>"  ,CHAR_RuleDelayed},
{":-("  ,CHAR_SadSmiley},
{"sa"  ,CHAR_Sampi},
{"sampi"  ,CHAR_Sampi},
{"sca"  ,CHAR_ScriptA},
{"scb"  ,CHAR_ScriptB},
{"scc"  ,CHAR_ScriptC},
{"scA"  ,CHAR_ScriptCapitalA},
{"scB"  ,CHAR_ScriptCapitalB},
{"scC"  ,CHAR_ScriptCapitalC},
{"scD"  ,CHAR_ScriptCapitalD},
{"scE"  ,CHAR_ScriptCapitalE},
{"scF"  ,CHAR_ScriptCapitalF},
{"scG"  ,CHAR_ScriptCapitalG},
{"scH"  ,CHAR_ScriptCapitalH},
{"scI"  ,CHAR_ScriptCapitalI},
{"scJ"  ,CHAR_ScriptCapitalJ},
{"scK"  ,CHAR_ScriptCapitalK},
{"scL"  ,CHAR_ScriptCapitalL},
{"scM"  ,CHAR_ScriptCapitalM},
{"scN"  ,CHAR_ScriptCapitalN},
{"scO"  ,CHAR_ScriptCapitalO},
{"scP"  ,CHAR_ScriptCapitalP},
{"scQ"  ,CHAR_ScriptCapitalQ},
{"scR"  ,CHAR_ScriptCapitalR},
{"scS"  ,CHAR_ScriptCapitalS},
{"scT"  ,CHAR_ScriptCapitalT},
{"scU"  ,CHAR_ScriptCapitalU},
{"scV"  ,CHAR_ScriptCapitalV},
{"scW"  ,CHAR_ScriptCapitalW},
{"scX"  ,CHAR_ScriptCapitalX},
{"scY"  ,CHAR_ScriptCapitalY},
{"scZ"  ,CHAR_ScriptCapitalZ},
{"scD"  ,CHAR_ScriptD},
{"sce"  ,CHAR_ScriptE},
{"sc8"  ,CHAR_ScriptEight},
{"scf"  ,CHAR_ScriptF},
{"sc5"  ,CHAR_ScriptFive},
{"sc4"  ,CHAR_ScriptFour},
{"scg"  ,CHAR_ScriptG},
{"sch"  ,CHAR_ScriptH},
{"sci"  ,CHAR_ScriptI},
{"scj"  ,CHAR_ScriptJ},
{"sck"  ,CHAR_ScriptK},
{"scl"  ,CHAR_ScriptL},
{"scm"  ,CHAR_ScriptM},
{"scn"  ,CHAR_ScriptN},
{"sc9"  ,CHAR_ScriptNine},
{"sco"  ,CHAR_ScriptO},
{"sc1"  ,CHAR_ScriptOne},
{"scp"  ,CHAR_ScriptP},
{"scq"  ,CHAR_ScriptQ},
{"scr"  ,CHAR_ScriptR},
{"scs"  ,CHAR_ScriptS},
{"sc7"  ,CHAR_ScriptSeven},
{"sc6"  ,CHAR_ScriptSix},
{"sct"  ,CHAR_ScriptT},
{"sc3"  ,CHAR_ScriptThree},
{"sc2"  ,CHAR_ScriptTwo},
{"scu"  ,CHAR_ScriptU},
{"scv"  ,CHAR_ScriptV},
{"scw"  ,CHAR_ScriptW},
{"scx"  ,CHAR_ScriptX},
{"scy"  ,CHAR_ScriptY},
{"scz"  ,CHAR_ScriptZ},
{"sc0"  ,CHAR_ScriptZero},
{"spl"  ,CHAR_SelectionPlaceholder},
{"sv"  ,CHAR_SHacek},
{"s"  ,CHAR_Sigma},
{"sigma"  ,CHAR_Sigma},
{"*6"  ,CHAR_SixPointedStar},
{"sc"  ,CHAR_SmallCircle},
{"space"  ,CHAR_SpaceIndicator},
{"spc"  ,CHAR_SpaceKey},
{"sfa"  ,CHAR_SpanFromAbove},
{"sfb"  ,CHAR_SpanFromBoth},
{"sfl"  ,CHAR_SpanFromLeft},
{"sqrt"  ,CHAR_Sqrt},
{"sq"  ,CHAR_Square},
{"star"  ,CHAR_Star},
{"sti"  ,CHAR_Stigma},
{"stigma"  ,CHAR_Stigma},
{"sub"  ,CHAR_Subset},
{"sub="  ,CHAR_SubsetEqual},
{"st"  ,CHAR_SuchThat},
{"sum"  ,CHAR_Sum},
{"sup"  ,CHAR_Superset},
{"sup="  ,CHAR_SupersetEqual},
{"ss"  ,CHAR_SZ},
{"sz"  ,CHAR_SZ},
{"tab"  ,CHAR_TabKey},
{"t"  ,CHAR_Tau},
{"tau"  ,CHAR_Tau},
{"tv"  ,CHAR_THacek},
{"tf"  ,CHAR_Therefore},
{"th"  ,CHAR_Theta},
{"theta"  ,CHAR_Theta},
{"q"  ,CHAR_Theta},
{"thn"  ,CHAR_Thorn},
{"~"  ,CHAR_Tilde},
{"~="  ,CHAR_TildeEqual},
{"~=="  ,CHAR_TildeFullEqual},
{"~~"  ,CHAR_TildeTilde},
{"*"  ,CHAR_Times},
{"u'"  ,CHAR_UAcute},
{"u''"  ,CHAR_UDoubleAcute},
{"u\""  ,CHAR_UDoubleDot},
{"u`"  ,CHAR_UGrave},
{"u^"  ,CHAR_UHat},
{"u{"  ,CHAR_UnderBrace},
{"u["  ,CHAR_UnderBracket},
{"u("  ,CHAR_UnderParenthesis},
{"un"  ,CHAR_Union},
{"u"  ,CHAR_Upsilon},
{"upsilon"  ,CHAR_Upsilon},
{"uT"  ,CHAR_UpTee},
{"uo"  ,CHAR_URing},
{"v"  ,CHAR_Vee},
{" |"  ,CHAR_VerticalBar},
{"|"  ,CHAR_VerticalSeparator},
{"^"  ,CHAR_Wedge},
{"wp"  ,CHAR_WeierstrassP},
{"wbishop"  ,CHAR_WhiteBishop},
{"wking"  ,CHAR_WhiteKing},
{"wknight"  ,CHAR_WhiteKnight},
{"wpawn"  ,CHAR_WhitePawn},
{"wqueen"  ,CHAR_WhiteQueen},
{"wrook"  ,CHAR_WhiteRook},
{"wf"  ,CHAR_Wolf},
{"wolf"  ,CHAR_Wolf},
{"x"  ,CHAR_Xi},
{"xi"  ,CHAR_Xi},
{"xnor"  ,CHAR_Xnor},
{"xor"  ,CHAR_Xor},
{"y'"  ,CHAR_YAcute},
{"y\""  ,CHAR_YDoubleDot},
{"z"  ,CHAR_Zeta},
{"zeta"  ,CHAR_Zeta},
{"zv"  ,CHAR_ZHacek},

};

int32_t esccode_to_char(const char * s)
{
    for (size_t i = 0; i < 670; i++)
    {
        if (strcmp(s, esccodes[i].s) == 0)
        {
            return esccodes[i].c;
        }
    }
    return 0;
}


char16_t escapedname_to_char(const char * s)
{
    for (size_t i = 0; i < NAMED_CHARS_COUNT; i++)
    {
        if (strcmp(s, namedchar_cstr[i]) == 0)
        {
            return namedchar_code[i];
        }
    }
    return 0;
}


size_t readonechar16(char16_t&c, const char * A)
{
    const unsigned char* a = reinterpret_cast<const unsigned char*>(A);
    if ((a[0] & 0x80) == 0)
    {
        c = a[0] & 0x7F;
        return 1;
    }
    else if ((a[0] & 0xE0) == 0xC0)
    {
        assert((a[1] & 0xC0) == 0x80);
        c = ((a[0] & 0x1F) << 6) + ((a[1] & 0x3F) << 0);
        return 2;
    }
    else
    {
        assert((a[0] & 0xE0) == 0xE0);
        assert((a[1] & 0xC0) == 0x80);
        assert((a[2] & 0xC0) == 0x80);
        c = ((a[0] & 0x0F) << 12) + ((a[1] & 0x3F) << 6) + ((a[2] & 0x3F) << 0);
        return 3;
    }
}


void stdstring_pushback_char16(std::string&s, char16_t c)
{
    if (c < 128)
    {
        s.push_back(char(c));
    }
    else if (c < 2048)
    {
        s.push_back(char(0xC0 | ((c >> 6) & 0x1F)));
        s.push_back(char(0x80 | ((c >> 0) & 0x3F)));
    }
    else
    {
        s.push_back(char(0xE0 | ((c >> 12) & 0x0F)));
        s.push_back(char(0x80 | ((c >> 6) & 0x3F)));
        s.push_back(char(0x80 | ((c >> 0) & 0x3F)));
    }
}

void stdstring_append_char16v(std::string&s, std::vector<char16_t>&v)
{
    for (size_t i = 0; i < v.size(); i++)
    {
        stdstring_pushback_char16(s, v[i]);
    }
}


void stdstring_pushback_asciiesc(std::string&s, char16_t c, bool ascii, bool esc)
{
    if (' ' <= c && c < 128)
    {
        if (esc && c == '"')
        {
            s.push_back('\\');
        }
        s.push_back(c);
    }
    else
    {
        if (ascii)
        {
            for (size_t i = 0; i < NAMED_CHARS_COUNT; i++)
            {
                if (c == namedchar_code[i])
                {
                    s.append(namedchar_cstr[i]);
                    return;
                }
            }
            s.push_back('\\');
            s.push_back('x');
            for (int i = 3; i >= 0; i--)
            {
                char d = (c >> (4*i)) & 15;
                s.push_back(d < 10 ? d + '0' : d + 'a' - 10);
            }

        }
        else
        {
            stdstring_pushback_char16(s, c);
        }
    }
}


void stdstring_append_asciiesc(std::string&s, std::string&a, bool ascii, bool esc)
{
    for (size_t i = 0; i < a.size();)
    {
        char16_t c;
        i += readonechar16(c, a.c_str() + i);
        stdstring_pushback_asciiesc(s, c, ascii, esc);
    }
}
